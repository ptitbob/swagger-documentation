<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.shipstone.sandbox</groupId>
  <artifactId>docgen</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>docgen</name>
  <description>Demo de generation de doc swagger et autres</description>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.0.0.M5</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <java.version>1.8</java.version>
    <!-- Version de la dependance Springfox -->
    <springfox-swagger2.version>2.7.0</springfox-swagger2.version>
  </properties>

  <repositories>
    <repository>
      <id>spring-milestones</id>
      <name>Spring Milestones</name>
      <url>https://repo.spring.io/libs-milestone</url>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </repository>
  </repositories>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <optional>true</optional>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- SWAGGER -->
    <dependency>
      <!-- dependance permettant l'utilisation des anotation SWAGGER et la génération du descripttif -->
      <groupId>io.springfox</groupId>
      <artifactId>springfox-swagger2</artifactId>
      <version>${springfox-swagger2.version}</version>
    </dependency>
    <!-- SWAGGER -->
  </dependencies>

  <profiles>
    <profile>
      <!-- Profile propre à la génération de la doc -->
      <id>documentation</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <pluginRepositories>
        <!-- malheureusement les plugins ne sont pas dispo sur le repo maven global -->
        <pluginRepository>
          <id>jcenter-snapshots</id>
          <name>jcenter</name>
          <url>http://oss.jfrog.org/artifactory/oss-snapshot-local/</url>
        </pluginRepository>
        <pluginRepository>
          <id>jcenter-releases</id>
          <name>jcenter</name>
          <url>http://jcenter.bintray.com</url>
          <snapshots>
            <enabled>false</enabled>
          </snapshots>
        </pluginRepository>
      </pluginRepositories>
      <properties>
        <!-- Repertoire de sortie pour le fichier swagger généré -->
        <swagger.output.dir>${project.build.directory}/swagger</swagger.output.dir>
        <swagger.output.file>${project.artifactId}-swagger.json</swagger.output.file>
        <!-- repertoire des snippet de code -->
        <swagger.snippetOutput.dir>${project.build.directory}/asciidoc/snippets</swagger.snippetOutput.dir>
        <!-- Configuration de la générationd de la documentation écrite en asciidoc -->
        <asciidoctor.input.directory>${project.basedir}/src/main/documentation</asciidoctor.input.directory>
        <asciidoctor.html.output.directory>${project.build.directory}/documentation/html</asciidoctor.html.output.directory>
        <asciidoctor.pdf.output.directory>${project.build.directory}/documentation/pdf</asciidoctor.pdf.output.directory>
        <asciidoc.generated.directory>${project.build.directory}/documentation/generated</asciidoc.generated.directory>
        <!-- Informations propre au plugin de transformaiton SWAGGER vers asciidoc -->
        <swagger2markup.version>1.2.0</swagger2markup.version>
        <swagger.input>${project.build.directory}/swagger/${swagger.output.file}</swagger.input>
      </properties>
        <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <systemPropertyVariables>
                <io.springfox.staticdocs.outputDir>${swagger.output.dir}</io.springfox.staticdocs.outputDir>
                <io.springfox.staticdocs.outputFile>${swagger.output.file}</io.springfox.staticdocs.outputFile>
                <io.springfox.staticdocs.snippetsOutputDir>${swagger.snippetOutput.dir}</io.springfox.staticdocs.snippetsOutputDir>
              </systemPropertyVariables>
              <includes>
                <!-- Inclusion que de la classe de génération de descritif Swagger -->
                <include>**/GenSwaggerFileAndDoc</include>
              </includes>
            </configuration>
          </plugin>
          <!-- Génération de la doc SWAGGER au format Asciidoc -->
          <!-- A placer avant la génération des fichiers de documentations -->
          <plugin>
            <groupId>io.github.swagger2markup</groupId>
            <artifactId>swagger2markup-maven-plugin</artifactId>
            <version>${swagger2markup.version}</version>
            <dependencies>
              <dependency>
                <groupId>io.github.swagger2markup</groupId>
                <artifactId>swagger2markup-import-files-ext</artifactId>
                <version>${swagger2markup.version}</version>
              </dependency>
              <dependency>
                <groupId>io.github.swagger2markup</groupId>
                <artifactId>swagger2markup-spring-restdocs-ext</artifactId>
                <version>${swagger2markup.version}</version>
              </dependency>
            </dependencies>
            <configuration>
              <swaggerInput>${swagger.input}</swaggerInput>
              <outputDir>${asciidoc.generated.directory}</outputDir>
              <config>
                <swagger2markup.markupLanguage>ASCIIDOC</swagger2markup.markupLanguage>
                <swagger2markup.pathsGroupedBy>TAGS</swagger2markup.pathsGroupedBy>
                <swagger2markup.extensions.dynamicOverview.contentPath>${project.basedir}/src/docs/asciidoc/extensions/overview</swagger2markup.extensions.dynamicOverview.contentPath>
                <swagger2markup.extensions.dynamicDefinitions.contentPath>${project.basedir}/src/docs/asciidoc/extensions/definitions</swagger2markup.extensions.dynamicDefinitions.contentPath>
                <swagger2markup.extensions.dynamicPaths.contentPath>${project.basedir}/src/docs/asciidoc/extensions/paths</swagger2markup.extensions.dynamicPaths.contentPath>
                <swagger2markup.extensions.dynamicSecurity.contentPath>${project.basedir}src/docs/asciidoc/extensions/security/</swagger2markup.extensions.dynamicSecurity.contentPath>
                <swagger2markup.extensions.springRestDocs.snippetBaseUri>${swagger.snippetOutput.dir}</swagger2markup.extensions.springRestDocs.snippetBaseUri>
                <swagger2markup.extensions.springRestDocs.defaultSnippets>true</swagger2markup.extensions.springRestDocs.defaultSnippets>
              </config>
            </configuration>
            <executions>
              <execution>
                <phase>test</phase>
                <goals>
                  <goal>convertSwagger2markup</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <!-- Génération de la documentation -->
          <plugin>
            <groupId>org.asciidoctor</groupId>
            <artifactId>asciidoctor-maven-plugin</artifactId>
            <version>1.5.6</version>
            <!-- Dependance neccessaire pour la générationd des pdf-->
            <dependencies>
              <dependency>
                <groupId>org.asciidoctor</groupId>
                <artifactId>asciidoctorj-pdf</artifactId>
                <version>1.5.0-alpha.16</version>
              </dependency>
              <dependency>
                <groupId>org.jruby</groupId>
                <artifactId>jruby-complete</artifactId>
                <version>9.1.13.0</version>
              </dependency>
            </dependencies>
            <!-- Configuration de la génération des documents -->
            <configuration>
              <attributes>
                <doctype>book</doctype>
                <toc>left</toc>
                <toclevels>3</toclevels>
                <numbered></numbered>
                <hardbreaks></hardbreaks>
                <sectlinks></sectlinks>
                <sectanchors></sectanchors>
                <generated>${asciidoc.generated.directory}</generated>
              </attributes>
            </configuration>
            <!-- Chaque execution du plugin ne peut prendre en charge qu'un type, alors on declare 2 execution, html et pdf -->
            <executions>
              <!-- on defini une execution (html puis pdf) pour la doc technique et pour le descriptif API REST via l'interpretation swagger -->
              <execution>
                <id>technical-html</id>
                <phase>test</phase>
                <goals>
                  <goal>process-asciidoc</goal>
                </goals>
                <configuration>
                  <sourceDirectory>${asciidoctor.input.directory}/technical</sourceDirectory>
                  <sourceDocumentName>index.adoc</sourceDocumentName>
                  <sourceHighlighter>coderay</sourceHighlighter>
                  <backend>html5</backend>
                  <outputDirectory>${asciidoctor.html.output.directory}</outputDirectory>
                  <outputFile>${asciidoctor.html.output.directory}/technical-documentation.html</outputFile>
                </configuration>
              </execution>
              <execution>
                <id>api-rest-html</id>
                <phase>test</phase>
                <goals>
                  <goal>process-asciidoc</goal>
                </goals>
                <configuration>
                  <sourceDirectory>${asciidoctor.input.directory}/api-rest</sourceDirectory>
                  <sourceDocumentName>index.adoc</sourceDocumentName>
                  <sourceHighlighter>coderay</sourceHighlighter>
                  <backend>html5</backend>
                  <outputDirectory>${asciidoctor.html.output.directory}</outputDirectory>
                  <outputFile>${asciidoctor.html.output.directory}/api-documentation.html</outputFile>
                </configuration>
              </execution>
              <execution>
                <id>technical-pdf</id>
                <phase>test</phase>
                <goals>
                  <goal>process-asciidoc</goal>
                </goals>
                <configuration>
                  <sourceDirectory>${asciidoctor.input.directory}/technical</sourceDirectory>
                  <sourceDocumentName>index.adoc</sourceDocumentName>
                  <sourceHighlighter>coderay</sourceHighlighter>
                  <backend>pdf</backend>
                  <outputDirectory>${asciidoctor.pdf.output.directory}</outputDirectory>
                  <outputFile>${asciidoctor.pdf.output.directory}/technical-documentation.pdf</outputFile>
                </configuration>
              </execution>
              <execution>
                <id>api-rest-pdf</id>
                <phase>test</phase>
                <goals>
                  <goal>process-asciidoc</goal>
                </goals>
                <configuration>
                  <sourceDirectory>${asciidoctor.input.directory}/api-rest</sourceDirectory>
                  <sourceDocumentName>index.adoc</sourceDocumentName>
                  <sourceHighlighter>coderay</sourceHighlighter>
                  <backend>pdf</backend>
                  <outputDirectory>${asciidoctor.pdf.output.directory}</outputDirectory>
                  <outputFile>${asciidoctor.pdf.output.directory}/api-documentation.pdf</outputFile>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <!-- Profile propre aux tests d'intégration -->
      <id>test-integration</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <includes>
                <!-- Pattern des classes de TU et tests intégrations -->
                <include>**/*Test</include>
                <include>**/*Tests</include>
                <include>**/*TestIT</include>
                <include>**/*TestsIT</include>
              </includes>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
